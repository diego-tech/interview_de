name: interview_de

x-airflow-common: &airflow-common
  image: apache/airflow:2.9.3
  env_file:
    - ../.env                             
  environment:
    # Executor Celery (requiere Postgres para metadatos y Redis como broker)
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO

    # Metadatos de Airflow (NO es tu Supabase)
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow

    # Celery broker + result backend
    AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow

    # Permitir importar tu código (src.*)
    PYTHONPATH: "/opt/airflow/app"

    # UID para permisos de archivos (tómalo de .env)
    AIRFLOW_UID: "${AIRFLOW_UID:-50000}"

  volumes:
    - ../dags:/opt/airflow/dags
    - ../requirements.txt:/opt/airflow/requirements.txt    # archivo raíz → contenedor
    - ..:/opt/airflow/app                                  # repo completo (para src/*)
  working_dir: /opt/airflow
  user: "${AIRFLOW_UID:-50000}:0"

services:
  airflow-postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - airflow_db:/var/lib/postgresql/data

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  airflow-init:
    <<: *airflow-common
    depends_on:
      airflow-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -lc "pip install -r /opt/airflow/requirements.txt &&
                airflow db init &&
                airflow users create -u admin -p admin -r Admin -e admin@example.com -f Admin -l User || true"
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: >
      bash -lc "pip install -r /opt/airflow/requirements.txt && airflow webserver"
    ports:
      - "8080:8080"

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: >
      bash -lc "pip install -r /opt/airflow/requirements.txt && airflow scheduler"

  airflow-worker:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: >
      bash -lc "pip install -r /opt/airflow/requirements.txt && airflow celery worker"

volumes:
  airflow_db:
